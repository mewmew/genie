{{ $root := . -}}
__attribute__((no_caller_saved_registers)) // ref: https://clang.llvm.org/docs/AttributeReference.html#no-caller-saved-registers
{{ .RetType }} {{ with .CallConv }}{{ . }} {{ end -}} {{ .FuncName }}(
{{- range $i, $v := .Params }}
	{{- if ne $i 0 }}, {{ end }}
	{{- typeIdentString .CType .CVarName }}
{{- end -}}
) {
	printf("{{ .FuncName }}\n");
{{- range .Params }}
	printf("\t{{ .CVarName }}: {{ verb .CType }}\n", {{ .CVarName }});
{{- end }}
	// store hook and restore original asm
	uint8_t hook_genie[{{ .PatchSize }}];
	uint8_t orig_genie[] = {
{{- range $i, $v := .Orig }}
	{{- if ne $i 0 }}, {{ end }}
	{{- printf "0x%02X" $v }}
{{- end -}}
	};
	uint8_t *p_genie = (uint8_t *){{ printf "0x%06X" .Addr }};
	for (int i = 0; i < {{ .PatchSize }}; i++) {
		hook_genie[i] = p_genie[i];
		p_genie[i] = orig_genie[i];
	}
	// call original function
	{{ .RetType }} ({{ .CallConv }} *f_genie)(
{{- range $i, $v := .Params }}
	{{- if ne $i 0 }}, {{ end }}
	{{- typeIdentString .CType .CVarName }}
{{- end -}}
	) = (void *){{ printf "0x%06X" .Addr }};
	{{ with .ReturnParam }}{{ .CType }} {{ .CVarName }}_genie = {{ end -}} f_genie(
{{- range $i, $v := .Params }}
	{{- if ne $i 0 }}, {{ end }}
	{{- .CVarName }}
{{- end -}}
	);
	// restore hook asm
	for (int i = 0; i < {{ .PatchSize }}; i++) {
		p_genie[i] = hook_genie[i];
	}
	// return
	{{- with .ReturnParam }}
	printf("\t{{ .CVarName }} ({{ $root.FuncName }}): {{ verb .CType }}\n", {{ .CVarName }}_genie);
	return {{ .CVarName }}_genie;
	{{- else }}
	printf("end ({{ $root.FuncName }})\n");
	{{- end }}
}

